function filteredArray = gaussianFilter(array, sigma)% Filter an vector with a gaussian of specified width% Returned vector has the same length as the input vector% Total area is preserved, edge effects are eliminatedbins = length(array);if (bins == 0)	filteredArray = [];	return;endif (sigma <= 0)	filteredArray = array;	return;end% Create a filter spanning +/-3 sigmas with area 1.0filterBins = round(sigma * 3.0) * 2 + 1;h = fspecial('gaussian', [1 filterBins], sigma);filtered = conv(array, h, 'full');%filteredArray = conv(array, h, 'full');% There are edge effects because the filter operates beyond% the limits of the array.  Both ends are normalized back up% to compensate for this - usage of 'same' option in conv function will take care of edge problem%%{area = 1.0;halfFilterBins = floor(filterBins / 2);for index = 1:halfFilterBins	area = area - h(index);	filtered(filterBins - index) = filtered(filterBins - index) / area;	filtered(bins + index) = filtered(bins + index) / area;end% Clip out the extra bins that the filtering addedfilteredArray = filtered(halfFilterBins + 1:halfFilterBins + bins);%}